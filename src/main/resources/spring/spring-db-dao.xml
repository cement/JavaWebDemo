<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/jee
                           http://www.springframework.org/schema/jee/spring-jee.xsd">
    <!--配置整合MyBatis过程-->

    <!--1：配置数据库相关参数 properties的属性：${url}-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
<!--jndi 数据源 -->
<!--    <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName" value="java:comp/env/jdbc/jndiDataSource"/>
    </bean>-->
<!--　　<bean id="d" class="com.alibaba.druid.pool.DruidDataSourceFactory"/>-->
    <!--ali 数据源-->
    <bean id = "dataSource" class = "com.alibaba.druid.pool.DruidDataSource" destroy-method = "close" >
        <!-- 数据库基本信息配置 -->
        <property name = "url" value = "${url}" />
        <property name = "username" value = "${user}" />
        <property name = "password" value = "${password}" />
        <property name = "driverClassName" value = "${driver}" />
    </bean>
    <!--2：数据库连接池-->
    <!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        &lt;!&ndash;配置连接池属性&ndash;&gt;
        <property name="driverClass" value="${driver}"/>
        <property name="jdbcUrl" value="${url}"/>
        <property name="user" value="${user}"/>
        <property name="password" value="${password}"/>

        &lt;!&ndash;c3p0连接池的私有属性配置&ndash;&gt;
        <property name="maxPoolSize" value="${maxPoolSize}"/>
        <property name="minPoolSize" value="${minPoolSize}"/>
        &lt;!&ndash;关闭连接后不自动commit&ndash;&gt;
        <property name="autoCommitOnClose" value="${autoCommitOnClose}"/>
        &lt;!&ndash;获取连接超时时间&ndash;&gt;
        <property name="checkoutTimeout" value="${checkoutTimeout}"/>
        &lt;!&ndash;当获取连接失败重试次数&ndash;&gt;
        <property name="acquireRetryAttempts" value="${acquireRetryAttempts}"/>
    </bean>-->
    <!--3：配置SqlSessionFactory对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据库连接池-->
        <property name="dataSource" ref="dataSource"/>
        <!--配置MyBatis全局配置文件：mybatis-config.xml-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--扫描entity包，使用别名-->
        <property name="typeAliasesPackage" value="com.cement.ysh.entity"/>
        <!--扫描sql配置文件：mapper需要的xml文件-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>
    <!--4：配置扫描Dao接口包，动态实现Dao接口，注入到Spring容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--注入sqlSessionFactory-->
        <!--<property name="sqlSessionTemplateBeanName" value="sqlSessionFactory"/>-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--给出需要扫描Dao接口包-->
        <property name="basePackage" value="com.cement.ysh.dao"/>
    </bean>
    <!--注入RedisDao-->
    <bean id="redisDao" class="com.cement.ysh.dao.cache.RedisDao">
        <constructor-arg index="0" value="localhost"/>
        <constructor-arg index="1" value="6379"/>
    </bean>
    <!--<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/jndiDataSource" />-->
</beans>